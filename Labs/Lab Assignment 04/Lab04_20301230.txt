
Assignment 04  (CSE220)  FALL'21
Farhan Akbor Khan
ID: 20301230
Section: 08



###Task 1
#Array Based Stack

class stack:
    list=[]
    pointer=-1
    def push(self,element):
        self.list.append(element)
        self.pointer+=1
    def peek(self):
        if self.list==[]:
            return "Empty List"
        else:
            return(self.list[self.pointer])
    def pop(self):
        if self.list==[]:
            return "Empty List"
        else:
            value = self.list[self.pointer]
            self.list = self.list[:-1]
            self.pointer -= 1
            return value
def investigate(data):
    open=['(','{','[']
    close=[')','}',']']
    stack1=stack()
    for i in data:
        if i in open:
            stack1.push(i)

        elif i in close:
            if (stack1.peek()=="(" and i==")") or (stack1.peek()=="{" and i=="}") or (stack1.peek()=="[" and i=="]"):
                stack1.pop()
            else:
                print("This expression is NOT correct.")
                return

    if stack1.list==[]:     ###if stack1.peek()== "Empty List":
        print("This expression is correct.")
    else:
        print("This expression is NOT correct.")

##Tester Class##
b= '1+2*(3/4)'
investigate(b)





###Task 2
#Linked-List Based Stack

class Node:
    def __init__(self,v,n):
        self.value=v
        self.next=n
class stack:
    head = None
    def push(self,element):
        if self.head==None:
            self.head=Node(element,None)
        else:
            n=Node(element,None)
            n.next=self.head
            self.head=n
    def peek(self):
        if self.head==None:
            return "Empty Linked-List"
        else:
            return(self.head.value)
    def pop(self):
        if self.head==None:
            return "Empty List"
        else:
            temp=self.head
            self.head=temp.next
            temp.value=None
            temp.next=None

def investigate(data):
    open=['(','{','[']
    close=[')','}',']']
    stack2=stack()
    for i in data:
        if i in open:
            stack2.push(i)
        elif i in close:
            if (stack2.peek()=="(" and i==")") or (stack2.peek()=="{" and i=="}") or (stack2.peek()=="[" and i=="]"):
                stack2.pop()
            else:
                print("This expression is NOT correct.")
                return
    if stack2.peek()== "Empty Linked-List":
        print("This expression is correct.")
    else:
        print("This expression is NOT correct.")


##Tester Class##

b= '1+2*[3*3+{4–5(6(7/8/9)+10)–11+(12*8)]+14'
investigate(b)