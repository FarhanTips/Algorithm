
Assignment 02  (CSE220)  FALL'21
Farhan Akbor Khan
ID: 20301230
Section: 08




class Node:
    def __init__(self, v, n):
        self.value=v
        self.next = n

class MyList:
    def __init__(self,a=None):
        self.head=None
        self.tail=None
        for i in a:
            newNode=Node(i,None)
            if self.head==None:
                self.head=newNode
                self.tail=newNode
            else:
                self.tail.next=newNode
                self.tail= newNode

    def showList(self):
        if self.head==None:
            print("Empty list")
            return
        n=self.head
        while n is not None:
            print(n.value)
            n=n.next

    def isEmpty(self):
        if self.head==None:
            print("True")
        else:
            print(False)

    def clear(self):
        while self.head is not None:
            self.head.value=None
            self.head=self.head.next

    def insert_new(self, element, idx):
      newnode = Node(element, None)
      if idx==0:
        newnode.next= self.head
        self.head= newnode
      
      else:
        pre_idx=idx-1   # 5
        n = self.head
        for i in range(pre_idx):
          n=n.next
        newnode.next=n.next
        n.next=newnode

    def insert(self, newElement):
        n=self.head
        node = Node(newElement, None)
        investigate=False
        while n is not None:
            if n.value==newElement:
                print("newElement already exists in the list")
                investigate=True
            n=n.next
        if investigate==False:
            if self.head==None:
                self.head=node
                self.tail=node
            else:
                self.tail.next = node
                self.tail = node

    def insert2(self,newElement,index):
        node=Node(newElement,None)
        n = self.head
        investigate=False
        while n is not None:
            if n.value==newElement:
                print("newElement already exists in the list")
                investigate=True
            n=n.next
        if investigate==False:
            n=self.head
            if index == 0:
                node.next = self.head
                self.head = node
            else:
                for i in range(index - 1):
                    n = n.next
                temp = n.next
                n.next = node
                node.next = temp

    def remove(self, deletekey):
        count=0
        y=0
        n=self.head
        temp=None
        if n.value==deletekey:
            s=n.value
            n=n.next
            self.head=n
            return s
        n = self.head
        while n is not None:
            count+=1
            if n.value==deletekey:
                temp=n
                y=count
            n=n.next
        if y==0:
            print("Delete Key is not in list")
        else:
            n = self.head
            for i in range(y - 2):
                n = n.next
            s=n.next
            n.next = s.next
            return s.value

    def remove2(self,dkey):
        cou=0
        n= self.head
        while n is not None:
            cou+=1
            n=n.next
        for i in range(cou):
          n=self.head
          v="Not Found"
          count=0
          while n is not None:
              if n.value==dkey:
                  v= "Found"
                  break
              count+=1
              n=n.next
          if v == "Not Found":
            print("Key does not exist!")
            return
          else:
            if count==0:
              self.head = self.head.next
            else:
              new_n = self.head
              for i in range(count-1):
                new_n=new_n.next
          
              new_n.next = n.next
              n.vale=None
              n.next=None
        
    def even(self):
        head=None
        tail=None
        n=self.head
        while n is not None:
            if n.value%2==0:
                new_Node=Node(n.value,None)
                if head==None:
                    head=new_Node
                    tail=new_Node
                else:
                    tail.next=new_Node
                    tail=new_Node
            n=n.next
        v=head
        if head==None:
            print("Empty List")
        else:
            while v is not None:
                print(v.value)
                v=v.next

    def find_out(self,newelement):
        n=self.head
        investigate=False
        while n is not None:
            if n.value==newelement:
                investigate=True
                break
            n=n.next
        print(investigate)

    def reverse(self):
        n=self.head
        Box=None
        while n is not None:
            temp=n.next
            n.next=Box
            Box=n
            n=temp
        self.head=Box

    def sort(self):
        n=self.head
        while n.next is not None:
            tail=n.next
            while tail is not None:
                if n.value > tail.value:
                    temp=n.value
                    n.value=tail.value
                    tail.value=temp
                tail=tail.next
            n=n.next

    def sum_value(self):
        total=0
        n=self.head
        while n is not None:
            total=total+n.value
            n=n.next
        print(total)

    def rotate(self,way,index):
        if way=="left":
            temp = self.head
            n = self.head
            for i in range(index):
                n = n.next
            self.head = n
        else:
            temp = self.head
            n = self.head
            for i in range(index):
                n = n.next
            self.head = n

#---------------------Tester-----------------------#

a=[13,3,1,6,4,12,4,9]
l1=MyList(a)
l1.showList()
l1.isEmpty()
l1.insert(4)
l1.remove(2)
l1.showList()
l1.insert2(12,0)
l1.showList()
l1.even()
l1.find_out(6)
l1.reverse()
l1.sort()
l1.rotate("left",2)
l1.showList()
l1.sum_value()