
Assignment 08  (CSE220)  FALL'21
Farhan Akbor Khan
ID: 20301230
Section: 08




class Node:
    def __init__(self,value,p,n):
        self.prev=p
        self.value=value
        self.next=n

class binary_tree:
    def formation(self,value):
        return Node(value,None,None)
    def branch(self,n,value):
        if n is None:
            return self.formation(value)
        if value> n.value:
            n.next=self.branch(n.next, value)
        else:
            n.prev=self.branch(n.prev, value)
        return n


###Task 1
    def Height(self,head):
        if head is None:
            return -1
        return max(self.Height(head.prev),self.Height(head.next))+1


###Task 2
    def Level(self,head):
        total=0
        m=1
        if head is None:
            return -1
        total+= max(self.Height(head.prev),self.Height(head.next))+1
        return (total+m)


###Task 3
    def Preorder(self,head):
        if head is not None:
            print(head.value)
            self.Preorder(head.next)
            self.Preorder(head.prev)


###Task 4
    def Inorder(self,head):
        if head is not None:
            self.Inorder(head.prev)
            print(head.value)
            self.Inorder(head.next)


###Task 5
    def Postorder(self,head):
        if head is not None:
            self.Postorder(head.next)
            self.Postorder(head.prev)
            print(head.value)


###Task 7
    def copy(self,head):
        if head is None:
            return None
        newtree=Node(head.value)
        newtree.next=self.copy(head.next)
        newtree.prev=self.copy(head.prev)
        return newtree


###Tester
t=binary_tree()
head=t.formation(12)
t.branch(head,6)
t.branch(head,9)
t.branch(head,53)
t.branch(head,18)
t.branch(head,15)
t.branch(head,23)
t.branch(head,26)
t.branch(head,4)
t.branch(head,12)
t.branch(head,99)
print(t.Height(head))
print(t.Level(head))
t.Inorder(head)
t.Preorder(head)
t.Postorder(head)