
Assignment 03  (CSE220)  FALL'21
Farhan Akbor Khan
ID: 20301230
Section: 08



####Task 1

class Node:
    def __init__(self,v,n,p):
        self.value=v
        self.next=n
        self.prev=p


####Task 2

class DoublyList:
    def __init__(self,a):
        self.head=Node(None,None,None)
        self.head.next=self.head
        self.head.prev=self.head
        for i in a:
            newNode = Node(i,None,None)
            newNode.next=self.head
            newNode.prev=self.head.prev
            self.head.prev.next=newNode
            self.head.prev=newNode

    def showList(self):
        n=self.head.next
        if self.head==self.head.next:
            print('Empty list')
        else:
            while n is not self.head:
                print(n.value)
                n=n.next

    def insert(self, newElement):
        n=self.head.next
        newNode=Node(newElement,None,None)
        while n is not self.head:
            if n.value == newElement:
                print("key already exists")
                return
            n=n.next
        newNode.next=self.head
        newNode.prev=self.head.prev
        self.head.prev.next=newNode
        self.head.prev=newNode

    def insert_two(self,newElement,index):
        n=self.head.next
        length=0
        while n is not self.head:
            length+=1
            n=n.next
        if index>length or index<0:
            print("Index does not exist")
            return
        n=self.head.next
        count=0
        while n is not self.head:
            count+=1
            if count==index:
                break
            n=n.next
        pred=n
        node=Node(newElement,None,None)
        node.prev=pred
        node.next=pred.next
        pred.next.prev=node
        pred.next=node

    def remove(self, index):
        n=self.head.next
        length=0
        while n is not self.head:
            length+=1
            n=n.next
        if index>=length or index<0:
            print("Index does not exist")
            return
        n=self.head.next
        count=0
        while n is not self.head:
            count+=1
            if count==index:
                break
            n=n.next
        pred=n
        q=pred.next
        pred.next=q.next
        q.next.prev=pred
        q.next=None
        q.prev=None
        q=None

    def removeKey(self,deletekey):
        n=self.head.next
        check=False
        newNode=Node(deletekey,None,None)
        while n is not self.head:
            if n.value==deletekey:
                check=True
                temp=n.prev
                n.next.prev = temp
                temp.next = n.next
                return n.value
            n=n.next
        if check==False:
            print("The deleted key value does not exists")

###################################################Tester Class#######################################

a = [10,20,30,40]
l1 =  DoublyList(a)
#l1.insert(60)
#l1.showList()
#l1.insert_two(21,3)
l1.remove(0)
#l1.removeKey(10)
l1.showList()